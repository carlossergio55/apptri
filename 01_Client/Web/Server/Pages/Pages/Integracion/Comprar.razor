@page "/comprar-public"
@layout PublicLayout
@using Infraestructura.Models.Integracion
@using MudBlazor
@inject NavigationManager Nav
@inject ISnackbar Snackbar
@using Infraestructura.Models.Clasificador
@using Microsoft.AspNetCore.Components
@using Syncfusion.Blazor.Grids
@using System.Globalization
@inherits MainBaseComponent

<link href="styles/Integracion/comprar-public.css" rel="stylesheet" />

<!-- STEPPER / PROCESO -->
<MudPaper Elevation="1" Class="comp-public-stepper p-4 rounded-xl mb-4">
    <MudText Typo="Typo.subtitle1" Align="Align.Center" Class="stepper-title mb-2">
        PROCESO DE COMPRA
    </MudText>

    <div class="comp-steps">
        <div class="comp-step active">
            <span class="dot"></span>
            <span class="label">Buscar</span>
        </div>
        <div class="comp-bar"></div>

        <div class="comp-step">
            <span class="dot"></span>
            <span class="label">Asientos</span>
        </div>
        <div class="comp-bar"></div>

        <div class="comp-step">
            <span class="dot"></span>
            <span class="label">Datos</span>
        </div>
        <div class="comp-bar"></div>

        <div class="comp-step">
            <span class="dot"></span>
            <span class="label">Pago</span>
        </div>
    </div>
</MudPaper>

<MudContainer MaxWidth="MaxWidth.Medium" Class="comp-public-contenedor mt-10">
    <MudPaper Elevation="3" Class="comp-public-formulario p-6 rounded-xl">

        <!-- Título centrado y botón limpiar a la izquierda -->
        <MudText Typo="Typo.h4" Class="comp-public-titulo">
            BUSCAR SALIDAS
        </MudText>
        <MudText class="ver-tutorial-btn" OnClick="@AbrirTutorial" style="cursor:pointer;">
            ▶ Ver tutorial
        </MudText>
        <MudGrid Class="mb-6" AlignItems="AlignItems.Center">
            <MudItem xs="12">
                <MudButton Variant="Variant.Text"
                           Size="Size.Small"
                           StartIcon="@Icons.Material.Filled.Clear"
                           OnClick="@LimpiarCampos"
                           Class="comp-public-limpiar-boton">
                    Limpiar
                </MudButton>
            </MudItem>
        </MudGrid>

        <!-- Primera fila: origen, duración y destino -->
        <MudGrid Class="mb-4">
            <MudItem xs="12" md="4">
                <MudText Class="comp-public-etiqueta">Seleccione ciudad de origen</MudText>
                <MudSelect T="string" @bind-Value="OrigenSeleccionado" Disabled="true"
                           Variant="Variant.Outlined" Margin="Margin.Dense">
                    <MudSelectItem T="string" Value='@("Sucre")'>Sucre</MudSelectItem>
                </MudSelect>


            </MudItem>

            <MudItem xs="12" md="4" Class="d-flex justify-center align-center">
                @if (!string.IsNullOrWhiteSpace(OrigenSeleccionado) && !string.IsNullOrWhiteSpace(DestinoSeleccionado))
                {
                    var duracion = _listaRutas?
                    .FirstOrDefault(r => r.Origen == OrigenSeleccionado && r.Destino == DestinoSeleccionado)?.Duracion;

                    <MudChip Color="Color.Info" Variant="Variant.Filled">
                        @($"Duración: {duracion ?? "N/D"}")
                    </MudChip>
                }
            </MudItem>

            <MudItem xs="12" md="4">
                <MudText Class="comp-public-etiqueta">Seleccione ciudad de destino</MudText>
                <MudSelect T="string"
                           @bind-Value="DestinoSeleccionado"
                           Variant="Variant.Outlined"
                           Margin="Margin.Dense">
                    @if (_destinosDisponibles?.Any() == true)
                    {
                        foreach (var ciudad in _destinosDisponibles)
                        {
                            <MudSelectItem Value="@ciudad">@ciudad</MudSelectItem>
                        }
                    }
                    else
                    {
                        @* Fallback: usa las rutas cargadas si aún no llegaron las paradas *@
                        @foreach (var ciudad in _listaRutas?.Where(r => r.Origen == "Sucre").Select(r => r.Destino).Distinct() ?? Enumerable.Empty<string>())
                        {
                            <MudSelectItem Value="@ciudad">@ciudad</MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudItem>
        </MudGrid>

        <!-- Segunda fila: fecha y pasajeros -->
        <MudGrid Class="mb-6">
            <MudItem xs="12" md="6">
                <MudText Class="comp-public-etiqueta">Seleccione fecha de salida</MudText>
                <MudDatePicker @bind-Date="FechaSalida"
                               Variant="Variant.Outlined"
                               Dense="true"
                               MinDate="@Hoy"
                               MaxDate="@MaxCompra"
                               Class="comp-public-campo two-week-window" />
            </MudItem>

            <MudItem xs="12" md="6">
                <MudText Class="comp-public-etiqueta">Número de pasajeros</MudText>
                <MudNumericField @bind-Value="CantidadPasajeros"
                                 Min="1"
                                 Max="10"
                                 Variant="Variant.Outlined"
                                 Dense="true"
                                 Class="comp-public-campo" />
            </MudItem>
        </MudGrid>

        <!-- Botones centrados -->
        <MudStack Direction="Row" Justify="Justify.Center" AlignItems="AlignItems.Center" Spacing="2">
            <MudButton Variant="Variant.Filled"
                       OnClick="@BuscarPasajes"
                       Class="comp-public-boton-buscar"
                       EndIcon="@Icons.Material.Filled.Search">
                Buscar
            </MudButton>
        </MudStack>

    </MudPaper>
</MudContainer>
