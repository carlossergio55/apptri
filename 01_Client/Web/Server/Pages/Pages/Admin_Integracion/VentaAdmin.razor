@page "/venta-pasajes"
@namespace Server.Pages.Pages.Admin_Integracion
@using MudBlazor
@using Microsoft.AspNetCore.Components.Web
@layout MainLayout
@inherits MainBaseComponent
@using Infraestructura.Models.Integracion
@using Web.Infraestructura.Models.Integracion

@using Server.Services.Integracion

<MudPaper Class="p-4">
    <!-- 🔹 Filtros -->
    <div class="flex items-center gap-3 mb-4">
        <MudDatePicker T="DateTime?"
                       @bind-Date="SelectedDate"
                       Label="Fecha"
                       DateFormat="dd/MM/yyyy"
                       Immediate=@true
                       DisableToolbar=@true
                       Adornment="Adornment.Start"
                       AdornmentIcon="@Icons.Material.Filled.Event"
                       Class="w-64" />

        <MudNumericField T="int"
                         @bind-Value="_diasFiltro"
                         Label="Días"
                         Min="1" Max="30"
                         Immediate=@true
                         Class="w-28" />

        <MudButton Variant="Variant.Text" OnClick="@(async () => await SetHoy())">Hoy</MudButton>
        <MudButton Variant="Variant.Text" OnClick="@(async () => await SetManana())">Mañana</MudButton>

        <MudSpacer />
        <MudText Typo="Typo.h6">
            Planilla – @(SelectedDate?.ToString("dd/MM/yyyy")) (+@_diasFiltro día(s))
        </MudText>
    </div>

    <!-- 🔹 Tabla principal -->
    <MudTable Items="_planilla" Hover="true" Dense="true" Bordered="true" Loading="IsLoading">
        <HeaderContent>
            <MudTh>Fecha</MudTh>
            <MudTh>Hora</MudTh>
            <MudTh>Ruta</MudTh>
            <MudTh>Bus</MudTh>
            <MudTh>Chofer</MudTh>
            <MudTh style="width:220px;">Ocupación</MudTh>
            <MudTh>Estado</MudTh>
            <MudTh style="width:260px">Acciones</MudTh>
        </HeaderContent>

        <RowTemplate>
            <MudTd>@context.Fecha.ToString("dd/MM")</MudTd>
            <MudTd>@context.HoraSalida</MudTd>
            <MudTd>@context.RutaNombre</MudTd>
            <MudTd>@context.Placa</MudTd>
            <MudTd>@context.ChoferNombre</MudTd>

            <MudTd>
                @{
                    var pct = context.Capacidad > 0 ? (double)context.Ocupados / context.Capacidad * 100.0 : 0.0;
                }
                <MudProgressLinear Value="@pct" Class="mt-1" />
                <MudText Typo="Typo.caption">@context.Ocupados/@context.Capacidad</MudText>
            </MudTd>

            <MudTd>
                <MudChip Color="@EstadoColor(context.Estado)" Variant="Variant.Filled">
                    @context.Estado
                </MudChip>
            </MudTd>

            <MudTd>
                @{
                    var isOpen = _ui.ContainsKey(context.IdViaje);
                    var label = isOpen ? "Cerrar" : "Vender / Ver";
                }
                <MudButton Disabled="@(!PuedeVender(context.Estado))"
                           Variant="Variant.Filled"
                           OnClick="@(async () => await ToggleExpand(context))">
                    @label
                </MudButton>

                <MudIconButton Class="ml-2"
                               Icon="@Icons.Material.Filled.Refresh"
                               OnClick="@(async () => await CargarPlanilla())"
                               Color="Color.Success"
                               AriaLabel="Refrescar" />
            </MudTd>
        </RowTemplate>

        <!-- 🔹 Fila expandida -->
        <ChildRowContent>
            @if (_ui.TryGetValue(context.IdViaje, out var u))
            {
                <MudPaper Class="p-5 my-3 venta-panel" Elevation="1">
                    @if (u.Loading)
                    {
                        <div class="flex items-center gap-2 mb-2">
                            <MudProgressCircular Class="mr-2" />
                            <MudText>Cargando…</MudText>
                        </div>
                    }

                    <MudGrid GutterSize="Size.Medium" Class="venta-grid">
                        <!-- Columna izquierda: Tramo + Mapa -->
                        <MudItem xs="12" md="7" lg="7" Class="seat-col">
                            <MudStack Spacing="2">

                                <!-- Tramo -->
                                <MudGrid>
                                    <MudItem xs="6">
                                        <MudText Typo="Typo.subtitle2" Class="mb-1">Origen</MudText>
                                        <MudChip Color="Color.Primary" Variant="Variant.Outlined">
                                            @u.Paradas.FirstOrDefault(p => p.IdParada == u.OrigenParadaId)?.Nombre ?? "Origen"
                                        </MudChip>
                                    </MudItem>
                                    <MudItem xs="6">
                                        <MudSelect T="int"
                                                   Label="Destino"
                                                   Value="@u.DestinoParadaId"
                                                   ValueChanged="@(async (int v) => { u.DestinoParadaId = v; await CargarSeatmap(u); })">
                                            @foreach (var p in u.Paradas.Where(p => p.IdParada != u.OrigenParadaId))
                                            {
                                                <MudSelectItem Value="@p.IdParada">@p.Nombre</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudItem>
                                </MudGrid>

                                <!-- Leyenda -->
                                <MudStack Direction="Direction.Row" AlignItems="AlignItems.Center" Spacing="1">
                                    <MudChip Variant="Variant.Outlined" Color="Color.Default">Libre</MudChip>
                                    <MudChip Variant="Variant.Filled" Color="Color.Warning">Reservado</MudChip>
                                    <MudChip Variant="Variant.Filled" Color="Color.Error">Ocupado</MudChip>
                                    <MudChip Variant="Variant.Filled" Color="Color.Primary">Pendiente</MudChip>
                                </MudStack>

                                <!-- Mapa de asientos -->
                                @if (u.Seatmap is { Count: > 0 })
                                {
                                    <div class="seat-grid">
                                        @foreach (var row in GetSeatRows(u.Seatmap))
                                        {
                                            <div class="seat-row">
                                                @foreach (var s in row)
                                                {
                                                    @SeatButton(u, s)
                                                }
                                            </div>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <MudAlert Severity="Severity.Info" Variant="Variant.Outlined">
                                        No hay asientos disponibles para mostrar.
                                    </MudAlert>
                                }
                            </MudStack>
                        </MudItem>

                        <!-- Columna derecha: Cliente + Pago + Acciones -->
                        <MudItem xs="12" md="5" lg="5" Class="form-col">
                            <MudPaper Class="p-6 registro-panel">
                                <MudText Typo="Typo.h6" Class="mb-1">
                                    Viaje @u.Viaje?.HoraSalida – @u.Viaje?.RutaNombre
                                </MudText>
                                <MudText Typo="Typo.body1" Class="mb-2">Bus: @u.Viaje?.Placa</MudText>
                                <MudDivider Class="my-3" />

                                <!-- Cliente -->
                                <MudText Typo="Typo.subtitle1">Cliente</MudText>
                                <MudGrid Class="mb-2">
                                    <MudItem xs="6">
                                        <MudTextField @bind-Value="u.Cliente.Carnet" Label="Carnet / CI" InputType="InputType.Number" />
                                    </MudItem>
                                    <MudItem xs="6">
                                        <MudTextField @bind-Value="u.Cliente.Celular" Label="Celular" InputType="InputType.Number" />
                                    </MudItem>
                                    <MudItem xs="12">
                                        <MudTextField @bind-Value="u.Cliente.Nombre"
                                                      Label="Nombre o Razón social"
                                                      Immediate=@true />

                                    </MudItem>
                                </MudGrid>

                                <!-- Pago -->
                                <MudText Typo="Typo.h6">Pago</MudText>
                                <MudGrid>
                                    <MudItem xs="6">
                                        <MudNumericField T="decimal"
                                                         @bind-Value="u.PrecioUnitario"
                                                         Label="Precio (Bs)*"
                                                         Min="0.01M"
                                                         Immediate=@true />
                                    </MudItem>
                                    <MudItem xs="6">
                                        <MudSelect T="string" @bind-Value="u.MetodoPago" Label="Medio de pago*">
                                            <MudSelectItem Value="@("EFECTIVO")">Efectivo</MudSelectItem>
                                            <MudSelectItem Value="@("QR")">QR</MudSelectItem>
                                            <MudSelectItem Value="@("TRANSFERENCIA")">Transferencia</MudSelectItem>
                                        </MudSelect>
                                    </MudItem>


                                </MudGrid>

                                @if (u.MetodoPago is "QR" or "TRANSFERENCIA")
                                {
                                    <MudTextField @bind-Value="u.ReferenciaPago" Label="Referencia / N° operación" />
                                }

                                <!-- Acciones -->
                                <MudAlert Severity="Severity.Info" Class="mt-3">
                                    Pendientes: <b>@u.Pendientes.Count</b> — Reservados: <b>@u.Seleccionados.Count</b> —
                                    Total (Bs): <b>@((u.PrecioUnitario * u.Seleccionados.Count).ToString("0.00"))</b>
                                </MudAlert>

                                <MudStack Direction="Direction.Row" Spacing="1" Class="mt-3">
                                    <MudButton Variant="Variant.Outlined"
                                               Disabled="@(u.Pendientes.Count == 0 && u.Seleccionados.Count == 0)"
                                               OnClick="@(async () => await CancelarSeleccion(u))">
                                        Cancelar
                                    </MudButton>

                                    <MudButton Variant="Variant.Filled"
                                               Color="Color.Info"
                                               Disabled="@(u.Pendientes.Count == 0 || !PermiteReservar(u.Viaje))"
                                               OnClick="@(async () => await ReservarSeleccion(u))">
                                        Reservar (@u.Pendientes.Count)
                                    </MudButton>

                                    <MudButton Variant="Variant.Filled"
                                               Color="Color.Secondary"
                                               Disabled="@(!PuedeConfirmar(u))"
                                               OnClick="@(async () => await ConfirmarSeleccion(u))">
                                        Pagar reserva (@u.Seleccionados.Count)
                                    </MudButton>
                                </MudStack>

                                <MudDivider Class="my-2" />

                                <MudButton FullWidth="true"
                                           Variant="Variant.Filled"
                                           Color="Color.Success"
                                           Disabled="@(!PuedeConfirmar(u))"
                                           OnClick="@(async () => await ConfirmarSeleccion(u))">
                                    Confirmar y emitir (@u.Seleccionados.Count)
                                </MudButton>
                            </MudPaper>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            }
        </ChildRowContent>

        <NoRecordsContent>
            <MudText>No hay viajes en el rango seleccionado.</MudText>
        </NoRecordsContent>
    </MudTable>
</MudPaper>

@code {
    // 🔹 Botón-asiento
    RenderFragment SeatButton(RowUiState u, SeatmapSeatDto s) => __builder =>
    {
        var st = (s.EstadoSeat ?? "LIBRE").ToUpperInvariant();
        var isPending = u.Pendientes.Contains(s.IdAsiento);
        var isReservedByUs = u.Seleccionados.ContainsKey(s.IdAsiento);
        var isChosen = isPending || isReservedByUs;

        var tip = (st is "OCUPADO" or "RESERVADO" or "BLOQUEADO")
            ? $"{s.Numero} · {s.ClienteNombre ?? "-"} · CI {s.ClienteCI ?? "-"}{(s.Precio.HasValue ? $" · Bs {s.Precio:0.00}" : "")}"
            : $"{s.Numero} · Libre";

        var cls = "seat " + (isChosen ? "pending"
                     : st == "OCUPADO" ? "occupied"
                     : (st == "RESERVADO" || st == "BLOQUEADO") ? "reserved"
                     : "free");

        __builder.OpenComponent<MudTooltip>(0);
        __builder.AddAttribute(1, "Text", tip);
        __builder.AddAttribute(2, "ChildContent", (RenderFragment)((ib) =>
        {
            ib.OpenElement(3, "button");
            ib.AddAttribute(4, "class", cls);
            ib.AddAttribute(5, "type", "button");
            ib.AddAttribute(6, "onclick",
                EventCallback.Factory.Create<MouseEventArgs>(this, async () =>
                {
                    if (isChosen)
                        await QuitarSeleccion(u, s);
                    else
                        await OnSeatClick(u, s);
                }));
            ib.AddContent(7, s.Numero);
            ib.CloseElement();
        }));
        __builder.CloseComponent();
    };
}
