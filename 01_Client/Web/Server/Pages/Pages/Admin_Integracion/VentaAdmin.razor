@page "/venta-pasajes"
@using MudBlazor
@inherits MainBaseComponent
@layout MainLayout

<MudPaper Class="p-4">

    <!-- Filtros superiores -->
    <div class="flex items-center gap-3 mb-4">
        <MudDatePicker T="DateTime?"
                       @bind-Date="SelectedDate"
                       Label="Fecha"
                       DateFormat="dd/MM/yyyy"
                       Immediate="@(true)"
                       DisableToolbar="@(true)"
                       Adornment="Adornment.Start"
                       AdornmentIcon="@Icons.Material.Filled.Event"
                       Class="w-64" />

        <MudNumericField T="int"
                         @bind-Value="_diasFiltro"
                         Label="Días"
                         Min="1" Max="30"
                         Immediate="@(true)"
                         Class="w-28" />

        <MudButton Variant="Variant.Text" OnClick="@(async () => await SetHoy())">Hoy</MudButton>
        <MudButton Variant="Variant.Text" OnClick="@(async () => await SetManana())">Mañana</MudButton>

        <MudSpacer />
        <MudText Typo="Typo.h6">
            Planilla – @(SelectedDate?.ToString("dd/MM/yyyy")) (+@_diasFiltro día(s))
        </MudText>
    </div>

    <!-- Tabla de viajes con fila expandible -->
    <MudTable Items="_planilla" Hover="true" Dense="true" Bordered="true" Loading="IsLoading">
        <HeaderContent>
            <MudTh>Fecha</MudTh>
            <MudTh>Hora</MudTh>
            <MudTh>Ruta</MudTh>
            <MudTh>Bus</MudTh>
            <MudTh>Chofer</MudTh>
            <MudTh style="width:220px;">Ocupación</MudTh>
            <MudTh>Estado</MudTh>
            <MudTh style="width:260px;">Acciones</MudTh>
        </HeaderContent>

        <RowTemplate>
            <MudTd>@context.Fecha.ToString("dd/MM")</MudTd>
            <MudTd>@context.HoraSalida</MudTd>
            <MudTd>@context.RutaNombre</MudTd>
            <MudTd>@context.Placa</MudTd>
            <MudTd>@context.ChoferNombre</MudTd>

            <MudTd>
                @{
                    var pct = context.Capacidad > 0 ? (double)context.Ocupados / context.Capacidad * 100.0 : 0.0;
                }
                <MudProgressLinear Value="@pct" Class="mt-1" />
                <MudText Typo="Typo.caption">@context.Ocupados/@context.Capacidad</MudText>
            </MudTd>

            <MudTd>
                <MudChip Color="@EstadoColor(context.Estado)" Variant="Variant.Filled">
                    @context.Estado
                </MudChip>
            </MudTd>

            <MudTd>
                <MudButton Disabled="@(!PuedeVender(context.Estado))"
                           Variant="Variant.Filled"
                           OnClick="@(async () => await ToggleExpand(context))">
                    Vender / Ver
                </MudButton>

                <MudIconButton Class="ml-2"
                               Icon="@Icons.Material.Filled.Refresh"
                               OnClick="@(async () => await CargarPlanilla())"
                               Color="Color.Success"
                               AriaLabel="Refrescar" />
            </MudTd>
        </RowTemplate>

        <!-- Contenido expandido -->
        <ChildRowContent>
            @if (_ui.TryGetValue(context.IdViaje, out var u))
            {
                <MudPaper Class="p-5 my-3 venta-panel" Elevation="1">
                    @if (u.Loading)
                    {
                        <div class="flex items-center gap-2 mb-2">
                            <MudProgressCircular Class="mr-2" />
                            <MudText>Cargando…</MudText>
                        </div>
                    }

                    <MudGrid GutterSize="Size.Medium">
                        <!-- Columna izquierda: tramo + mapa de asientos (ancha) -->
                        <MudItem xs="12" md="7" lg="7">
                            <MudStack Spacing="2">

                                <!-- Tramo: Origen fijo (Sucre) y solo Destino editable -->
                                <MudGrid>
                                    <MudItem xs="6">
                                        <MudText Typo="Typo.subtitle2" Class="mb-1">Origen</MudText>
                                        <MudChip Color="Color.Primary" Variant="Variant.Outlined">
                                            @{
                                                var origen = u.Paradas.FirstOrDefault(p => p.IdParada == u.OrigenParadaId)?.Nombre ?? "Sucre";
                                            }
                                            @origen
                                        </MudChip>
                                    </MudItem>
                                    <MudItem xs="6">
                                        <MudSelect T="int"
                                                   Label="Destino"
                                                   Value="u.DestinoParadaId"
                                                   ValueChanged="@(async (int v) => { u.DestinoParadaId = v; await CargarSeatmap(u); })"
                                                   Dense="false">
                                            @foreach (var p in u.Paradas.Where(p => p.IdParada != u.OrigenParadaId))
                                            {
                                                <MudSelectItem Value="@p.IdParada">@p.Nombre</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudItem>
                                </MudGrid>

                                <!-- Leyenda -->
                                <MudStack Direction="Direction.Row" AlignItems="AlignItems.Center" Spacing="1">
                                    <MudChip Variant="Variant.Outlined" Color="Color.Default">Libre</MudChip>
                                    <MudChip Variant="Variant.Filled" Color="Color.Warning">Reservado</MudChip>
                                    <MudChip Variant="Variant.Filled" Color="Color.Error">Ocupado</MudChip>
                                    <MudChip Variant="Variant.Filled" Color="Color.Primary">Seleccionado</MudChip>
                                </MudStack>

                                <!-- Mapa de asientos -->
                                @if (u.Seatmap is { Count: > 0 })
                                {
                                    <MudGrid GutterSize="Size.Small">
                                        @foreach (var s in u.Seatmap)
                                        {
                                            var isSelected = u.Seleccionados.ContainsKey(s.IdAsiento);
                                            var color = isSelected
                                            ? Color.Primary
                                            : (string.Equals(s.EstadoSeat, "OCUPADO", StringComparison.OrdinalIgnoreCase) ? Color.Error
                                            : (string.Equals(s.EstadoSeat, "RESERVADO", StringComparison.OrdinalIgnoreCase) ? Color.Warning
                                            : Color.Default));

                                            var variant = (isSelected || !string.Equals(s.EstadoSeat, "LIBRE", StringComparison.OrdinalIgnoreCase))
                                            ? Variant.Filled : Variant.Outlined;

                                            var tip = (string.Equals(s.EstadoSeat, "OCUPADO", StringComparison.OrdinalIgnoreCase) ||
                                            string.Equals(s.EstadoSeat, "RESERVADO", StringComparison.OrdinalIgnoreCase))
                                            ? $"{s.Numero} · {s.ClienteNombre ?? "-"} · CI {s.ClienteCI ?? "-"}{(s.Precio.HasValue ? $" · Bs {s.Precio:0.00}" : "")}"
                                            : $"{s.Numero} · Libre";

                                            <MudItem xs="2" sm="2" md="1">
                                                <MudTooltip Text="@tip">
                                                    @if (isSelected)
                                                    {
                                                        <MudButton Class="seat-btn-64"
                                                                   Color="@color"
                                                                   Variant="@variant"
                                                                   OnClick="@(async () => await QuitarSeleccion(u, s))">
                                                            @s.Numero
                                                        </MudButton>
                                                    }
                                                    else
                                                    {
                                                        <MudButton Class="seat-btn-64"
                                                                   Color="@color"
                                                                   Variant="@variant"
                                                                   Disabled="@(!string.Equals(s.EstadoSeat, "LIBRE", StringComparison.OrdinalIgnoreCase))"
                                                                   OnClick="@(async () => await OnSeatClick(u, s))">
                                                            @s.Numero
                                                        </MudButton>
                                                    }
                                                </MudTooltip>
                                            </MudItem>
                                        }
                                    </MudGrid>
                                }
                                else
                                {
                                    <MudAlert Severity="Severity.Info" Variant="Variant.Outlined">
                                        No hay asientos disponibles para mostrar. Verifica plantilla de bus o tramo seleccionado.
                                    </MudAlert>
                                }
                            </MudStack>
                        </MudItem>

                        <!-- Columna derecha: Cliente + Pago + Resumen (más grande) -->
                        <MudItem xs="12" md="5" lg="5">
                            <MudPaper Class="p-6 registro-panel">
                                <MudText Typo="Typo.h6" Class="mb-1">
                                    Viaje @u.Viaje?.HoraSalida – @u.Viaje?.RutaNombre
                                </MudText>
                                <MudText Typo="Typo.body1" Class="mb-2">Bus: @u.Viaje?.Placa</MudText>
                                <MudDivider Class="my-3" />

                                <MudText Typo="Typo.subtitle1">Cliente</MudText>
                                <MudGrid Class="mb-2">
                                    <MudItem xs="6">
                                        <MudTextField @bind-Value="u.Cliente.Carnet" Label="Carnet / NIT" InputType="InputType.Number" />
                                    </MudItem>
                                    <MudItem xs="6">
                                        <MudTextField @bind-Value="u.Cliente.Celular" Label="Celular" InputType="InputType.Number" />
                                    </MudItem>
                                    <MudItem xs="12">
                                        <MudTextField @bind-Value="u.Cliente.Nombre" Label="Nombre o Razón social" />
                                    </MudItem>
                                </MudGrid>

                                <MudText Typo="Typo.h6">Pago</MudText>
                                <MudGrid>
                                    <MudItem xs="6">
                                        <MudNumericField T="decimal"
                                                         @bind-Value="u.PrecioUnitario"
                                                         Label="Precio (Bs)*"
                                                         Min="@(0.01M)"
                                                         Immediate="@(true)" />
                                    </MudItem>
                                    <MudItem xs="6">
                                        <MudSelect @bind-Value="u.MetodoPago" Label="Medio de pago*">
                                            <MudSelectItem Value="@("EFECTIVO")">Efectivo</MudSelectItem>
                                            <MudSelectItem Value="@("QR")">QR</MudSelectItem>
                                            <MudSelectItem Value="@("TRANSFERENCIA")">Transferencia</MudSelectItem>
                                        </MudSelect>
                                    </MudItem>
                                </MudGrid>

                                @if (u.MetodoPago is "QR" or "TRANSFERENCIA")
                                {
                                    <MudTextField @bind-Value="u.ReferenciaPago"
                                                  Label="Referencia / N° operación" />
                                }

                                <MudAlert Severity="Severity.Info" Class="mt-3">
                                    Seleccionados: <b>@u.Seleccionados.Count</b> — Total (Bs): <b>@( (u.PrecioUnitario * u.Seleccionados.Count).ToString("0.00") )</b>
                                </MudAlert>

                                <MudStack Direction="Direction.Row" Spacing="1" Class="mt-3">
                                    <MudButton Variant="Variant.Outlined"
                                               Color="Color.Default"
                                               Disabled="@(u.Seleccionados.Count == 0)"
                                               OnClick="@(() => { u.Seleccionados.Clear(); StateHasChanged(); })">
                                        Limpiar selección
                                    </MudButton>

                                    <MudButton Variant="Variant.Filled"
                                               Color="Color.Primary"
                                               Disabled="@(!PuedeConfirmar(u))"
                                               OnClick="@(async () => await ConfirmarSeleccion(u))">
                                        Confirmar y emitir (@u.Seleccionados.Count)
                                    </MudButton>
                                </MudStack>
                            </MudPaper>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            }
        </ChildRowContent>

        <NoRecordsContent>
            <MudText>No hay viajes en el rango seleccionado.</MudText>
        </NoRecordsContent>
    </MudTable>
</MudPaper>

<style>
    /* Panel expandido un poco más ancho visualmente */
    .venta-panel {
        max-width: 100%;
    }

    /* Panel de registro más cómodo */
    .registro-panel {
        min-width: 420px;
    }

    /* Botón de asiento más grande */
    .seat-btn-64 {
        width: 64px;
        height: 64px;
        min-width: 64px;
        padding: 0;
        font-size: 16px;
        font-weight: 600;
    }
</style>
